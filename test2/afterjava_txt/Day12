19.01.11

SQL 함수

복수행 함수
- 그룹(집계) 함수 : sum, avg, count, max, min

단일행 함수
- 숫자형 함수
	round(Num,n) : n자리까지 반올림, n이 양수면 소수점 아래, 음수면 정수자리에서
	trunc(Num,n) : n이하 다 버림 
	mod(n1,n2) : 나머지 , n1%n2 값 
	ceil() : 올림
	floor() : 내림

- 문자형 함수
문자열자체는 대소문자 구분
	substr(string, startindex, num) : 문자열에서 일부 문자열 추출
	instr(string,sub) : 문자열내 일부문자열을 찾은 위치인덱스 리턴, 만약 없으면 0
	initcap() : 앞문자만 대문자
	upper(),lower() : 대문자, 소문자
	length() : 문자열 길이
	concat(s1,s2) : 문자열 결합 s1+s2 
		|| : 오라클의 문자열 결합 기호
		2개만 결합 가능
	lpad(string,n,'?'),rpad(string,n,'?') : 문자열의 길이를 n만큼으로 보여줄때 왼쪽, 오른쪽에 자리를 만들고 그 자리를 '?'로 채움 
	ltrim(),rtrim() : 문자열의 왼쪽, 오른쪽 공백 제거, but 가운데 공백은 제거하지 않음
	

- 날짜형 함수
기본타입 : rr/mm/dd
rr: 0-49:2000년대/50-99:1900년대
자동문자열형변환 -> 문자형함수 사용 가능
숫자 + - 연산 가능 : sysdate+1 -> +1일, sysdate-1 -> -1일 
	날짜 + 날짜
	날짜 - 날짜
	-> 숫자
	날자 + 숫자(일 단위)
	날짜 - 숫자(일 단위)
	-> 날짜

	sysdate : 현재 시스템의 날짜와 시간 반환
		select sysdate from dual
		dual : 1행만 출력 가상 임시 테이블
			       특정값에 함수만 적용하기 위해 dual 임시 테이블 활용
	months_between() : 두 날짜의 사이의 개월수       
	
	to_date(string,양식) : string을 해당 양식으로 되어있음을 이야기하고, 날짜값이나 기본 날짜형 타입이 아닌 값을 Oracle 날짜 타입으로 변환(문자열->날짜)		   
		to_date('19/01/01','yy/mm/dd')	
	
- 타입변환 함수
	to_number(string,string의 양식) : 문자 -> 숫자 
		string을 숫자로 바꿀 때 원래 string의 양식를 알려주고 이를 기준으로 숫자로 바꿈 
		숫자 + 문자 => 자동으로 문자가 숫자로 변경. 단, 문자 포함 내용은 숫자 표현 가능 
		to_number('100,000','000,000')
			
	to_char(num,양식) : 숫자 -> 문자, 날짜 -> 문자 
		날짜나 num를 해당 양식의 문자로 변환
		to_char(100) : '100'
		to_char(100000,'000,000')
		to_char(hire_date,'mm:dd:yyyy') : 지정 양식의 문자열로 변환
		to_char(hire_date,'fmmm:dd:yyyy') : fm 불필요한 0 제거
		to_char(hire_date,'fmmm"월" dd"일" yyyy"년도"') : 양식에 일반 문자열을 넣으려 할 때 "" 사용
		
	to_date(string,양식) : 문자 -> 날짜
		string을 해당 양식으로 되어있음을 이야기하고, 날짜값이나 기본 날짜형 타입이 아닌 값을 Oracle 날짜 타입으로 변환(문자열->날짜)		   
		to_date('19/01/01','yy/mm/dd')
		

- 기타 함수 
	nvl(col,?) : col의 null -> ?  
		?로 변환할 때 col의 타입과 동일해야 함


SQL 
- join query: 2개 이상 테이블에 나누어져 있는 칼럼을 한번에 조회하고자 할 때 

1> equi join : 다른 테이블.칼럼 = 

	사원이름과 부서이름 조회
	select employee_id, e.department_id,department_name
	from employees e, departments d
	where e.department_id = d.department_id

	3개 이상의 테이블을 join할 떄 각 테이블을 연결할 수 있는 칼럼에 대한 조건을 주어야 함.

2> self join : 같은 테이블.칼럼 = 
	같은 테이블을 조인하려고 할 때 alias 를 꼭 주어야 함
	
	각 사원의 사번, 이름, 상사사번, 상사이름 : 자기 자신테이블을 조인
	select me.employee_id, me.first_name, manager.employee_id, manager.first_name
	from employees me, employees manager
	where me.manager_id = manager.employee_id;

3> outer join : where 조건 만족하지 못하는 테이터도 조인해서 조회, 모든 데이터 출력 
	null이 없는 쪽에 (+)
		null 존재 칼럼 = null 존재 X (+)
	
	사원 이름, 부서이름 조회  outer join 으로 부서가 없어도 출력.
	select first_name, department_name
	from employees e, departments d
	where e.department_id = d.department_id(+)


- sub query
	select (select)
	from (select)
	where (select)
	
	단일행 subquery : = < > 
	Sarah 와 같은 부서에 근무하는 사원의 이름, 부서코드
		
	select first_name, department_id
	from employees
	where department_id = (select department_id
						from employees 
						where upper(first_name) = upper('sarah'))

	다중행 subquery : IN, <ANY|ALL, >ANY|ALL
	subquery 값이 여러개 있을 때 IN 연산자 활용 
		비교 연산자 사용 :> ANY - 최소보다 크다 min
					< ANY - 최대보다 작다 max
					> ALL - 모든 것보다 크다 max
					< ALL - 모든 것보다 작다 min






