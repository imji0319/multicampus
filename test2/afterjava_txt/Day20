19.01.21

웹 관련 기술 (html, css, js, jquery, : -> *.html
		+ servlet, jdbc (sql), : -> *.java
		+ jsp : -> *.jsp )
		
서블릿 
import javax.servlet.http.HttpServlet;
import javax.servlet.*

class A extends HttpServlet;
	둘 중 하나만 overridding 
	 	doPost() - post방식 처리결과 전송
	 	doGet() - get방식 처리결과 전송
	 	
	 	HttpServletRequest request
	 		request.getMethod();
	 		request.getHeader('userAgent');
	 		request.getRemoteAddr();
	 		
	 		String <- request.getParameter("파라마티이름");
	 		String[] <- request.getParametersValues("파라마티이름");
	 	
	 	HttpServletResponse response : http응답정보객체
	 		response.setContentType("text/html;charset=utf-9")
	 		PrintWriter out = response.getWriter()
	 		
	 		out.println("<h1>...</h1>") -> 브라우저에 정보 전송 
	 	
	 	서블릿에서 DB 이용 
	 	-> jdbc 와 같은 방식
	 	
session 	
1. http 프로토콜 stateless 프로코로
2. 이전 클라이언트 전송 정보 - 응답 이후 삭제
3. 다수개 클라이언트 -> 1개의 서버 메모리의 제한
4. 이전 클라이언트 전송 정보 - 서버 저장 - 응답이후 - 같은 클라이언트 : 정보 전송필요X 
5. 클라이언트 전송 정보를 서버에 저장 하는 기술 : session
6. servlet - > HttpSession 라이브러리 활용 
	HttpSession
	
	doGet(HttpServletRequest request ...
	
	1> 세션 생성 
	HttpSession session = request.getSession(); 
	
	브라우저 열고 서블릿 최초 요청시 세션 생성 (id 저장)
	2번째 이후 서블릿 요청시 이미 세션이 생성되어 있어서 getter 용도 (id 호출)
	
	2> session.setAttribute("sessionid", 사용자id)
	3> session.getAttribute("sessionid")
	4> session.removeAttribute("sessionid") : 세션 수동 삭재


	세션 (자동) 삭제
	- 사용한 브라우저 종료 
	- 브라우저 미종료시 무액션 상태에서 30분 경과
	
	세션 (수동) 삭제
	- session.removeAttribute("sessionid")
	- session.invalidate()
	
	세션 : 같은 클라이언트(같은 ip 같은 브라우저)가 같은 서버에 정보를 전송함에 있어 1번 전송 -> 서버 유지 
	
	
	
login.html
logout.html
mypage.html
LoginServlet
LogoutServlet
MyPageServlet



html태그 서버 파일 url
<form action ="">
<a href="">
	action = "http://ip:port/프로젝트명/경로명/파일명" //기본방식
	action = "파일명"    //작성중인 html파일과 똑같은 경로에 있는 파일 
	action = "../파일명" //현재 파일상위url, 프로젝트명까지 동일한 경로, 즉 상위 디렉토리에 있는 경우 
	action = "/파일명"   //현재 서버 동일  port번호까지 동일한 경우



서블릿 파일 객체 공유
1. 현재 서블릿 파일에서만 사용 (공유 X)
2. 현재 브라우저의 다른 서블릿 파일과 공유
3. 현재 서블릿이 지정한 특정 서블릿 파일과 공유


1> 1개의 서블릿 : 클라이언트 요청 - 처리 - 응답
2> 서블릿 1 : 클리이언트 요청 - 처리 
       서블릿 2 : 응답 
 => 여러개의 서블릿

<include> : oneServlet 출력결과 + shardServlet 출력결과
RequestDispatcher rd = request.getRequestDispathcher("공유다른서블릿");
	rd.include(request,response);
- 공통된 코드(공유서블릿)가 있다면 정의 
- request.setAttribute("공유속성변수명",object)
- (공유속성변수형변환)request.getAttribute("공유속성변수명") 

<forward> : oneServlet 로직실행 + sharedServlet 결과출력
RequestDispatcher rd = request.getRequestDispathcher("공유다른서블릿");
	rd.forward(request,response);



자바 구현 웹서버 기술 
1. servlet
	- 자바 클래스 구조 : 상속, 오버라이딩 (doGet/doPost)
	- html태그 직접적 사용 불가 -> response.getWriter - println 활용
	- html태그 문자열 취급 - 부속물 출력 
	
2. jsp
	- html파일 내부 자바문장 기술 구조 
	- html태그 표현 쉬움
	- 상속, 오버라이딩 불가 
	- 내부 웹서버가 서블릿 변환 방식 채택 
	- *.jsp 
		--> 내부 서블릿 소스 변경 -> 서블릿 컴파일 -> 클래스 실행 (tomcat 웹서버에서 수행)
		
		C:\eclipse\workspace\.metadata\.plugins\
		org.eclipse.wst.server.core\tmp0\work\
		Catalina\localhost\servlet\org\apache\jsp\jsp
	
	<html>
	<h1>
	<% 자바 문장 %>
	<form>
	<% 자바 문장 %>
	
	- get/post 구분하지 않고 request 하기 때문에 getMethod()로 확인해야함


요청 - 처리 - 응답 
(servlet 1개 로 처리)
(servlet - forward/include 여러개로 처리)

각 과정에 적절한 프로그램을 화용 
==> servlet : 요청 /처리 과정 구형  + jsp : 응답 과정 구현 


JSP
태그
1. <% %>
	- <% 스크립트 태그 : 자바문장  %>
	- <%= 표현문 : 브라우저출력/다른속성값출력 %>
		= <% out.println(출력내용); %> //자바 문장 없이 태그만 활용해서 쓰는 용도
		자바 문장을 같이 쓸 수 있음
		
	- <%! 변수/메소드 선언 %>
		<%! String s = "global"; %>
		전역변수
		 
	- <%@page %> : page 지시자 
		import ='lib1, lib2, package.lib3,...'; //import 속성은 계속 추가 작성 가능함 
	
	- <%-- --%> : 주석문
		<% %>태그 종류  주석처리 
		
		
2. <jsp:xxxx /> 
3. 내장객체 









