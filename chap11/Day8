19.01.07

chap11.기본 API 클래스

- Object 클래스
	toString()
	1. 출력문장 내부 자동 호출
	2. 오버라이딩 내용 출력
	3. 패키지명.클래스명@16진수주소암호
	4. public String toString()

	equals()
	1. 객체 동등성 비교
	2. 오버라이딩 다른 부분 동등성 비교 변경 가능 
	3. == 연산자 : 주소 동등성 비교
	4. String : equals 오버라이딩 - 문자열의 내용 동등성비교

- System 클래스
	System.out.println() : 모니터 출력
	new Scanner (System.ln) : 키보트 입력 
	System.getProperty("JAVA_HOME") : 컴퓨터의 시스템적 정보를 출력 가능 

- String 클래스
	역할 : 문자열 표현, 조작 기능 제공 메소드 포함 클래스
	특징 
	1> 클래스명 객체참조변수 = new 클래스명();
		String s1 = new String(); //원래 객체 생성 선언
		String s2 = "java" ; // 기본 타입 변수 선언 형식을 제공
	2> heap 영역 String 객체 문자열 내용 불변 
	3> 문자열 결합 : + 연산자 제공 
	
	equals(), equalsIngnoreCase()
	1. 문자열 비교
	
	toUpperCase(), toLowerCase()\
	1. 모든 문자열 대문자로 변경, 소문자로 변경 
	
	replace()
	1. 문자열 치환
	2. 변경하는 것이지만 heap영역에 새로운 객체 생성 
	
	length()
	1. 문자열의 길이 
	2. 배열변수.length
	
	substring(시작인덱스, 끝인덱스)
	1. 범위의 인덱스만큼 문자 반환
	2. 시작 인덱스 ~ 끝 인덱스 까지 문자열 반환
	
	indexOf()
	1. 특정문자열이 포함되어 있는지 확인
	2. 특정문자열 시작지점의 인덱스 위치 리턴
	3. if (indexOf() > 0) 이면 문자발견 0, else 문자발견x
	
	split()
	1. 특정값을 기준으로 문자열을 분활하는 메소드
	2. String [] 배열변수로 반환 
	
	concat()
	1. 문자열 결합
	
	chatAt()
	1. 특정 인덱스 하나만 지정하고 위치가 값 리턴
	2. return char 하나 타입
	
	trim()
	1. 양쪽 공백 제거
	
	valueOf()
	1. 문자열로 변환
	
- StringTokenizer
	token : 분리 의미잇는 최소 단위
	String클래스의 split() 메소드와 비슷한 기능
	여러개의 분리기준 사용 가능

Wrapper class : 
기본 타입들 연산자 : 참조타입들 = 클래스 정의 = 메소드 사용
값을 객체 형태로 감싸서 사용
- Boolean
- Character
- Byte
- Integer
- Short 
- Long
- Float
- Double 

Integer in =100 ; //auto boxing 
int i =new Integer(100) //auto unboxing

Double dd = 3.14 ; //d.메소드(), auto boxing 
double d =new Double(100) //dd - 연산자, auto unboxing


- Integer 클래스
	Integer.toBinaryString() -> 2진수
	Integer.toOctalString() -> 8진수
	Integer.toHexString() -> 16진수
	
	Integer.parseInt()
	1. 정수로 바꿈
	

- Math 클래스
	0.0 <= Math.random() <1 : return 실수
	Random.nextInt

java.util.*
- Date, Calendar
	날짜, 시간 데이터 표현 클래스
	Calendar.getInstance()
	Calendar.set()

java.text.*
- SimpleDateFormat
	SimpleDateFormat("yyyy/MM/dd/HH:mm:ss -E");
	연도 : y, 월 : M, 일 : d/D, 시 : H/h, 분 : mm, 초 : ss 추출메소드
		

- DecimalFormat
	double d = r*Math.PI;
	DecimalFormat df = new DecimalFormat("#.##");
	
	정수자리에 #의 개수는 중요하지 않음	
	# : 소수점 1자리 숫자(의미없는 0표시 x)
	0 : 소수점 1자리 숫자(의미없는 0표시 o)
	#.00 : 마지막 소수점이 0으로 의미가 없어도 0으로 나타냄
	주의 > 
	#.#0 이런식의 포맷을 줄 수 없음.
	소수점 1자리에도 0이 나타날 수 있기 떄문에 이와 같은 포맷을 오류가 발생


