19.01.04

chap7. 상속

메소드 overloading
- 1개의 클래스 내부에 같은 이름의 메소드 여러 개 정의, 다만 매개변수 개수, 타입, 순서 다르게 정의
- 중복 정의

메소드 overriding
- 우선시하다
- 상속 관계에 있는 2개의 클래스 내부에 같은 이름의 메소드 정의,
- 매개변수 같고, 리턴타입이 동일해야하며 modifier 같거나 더 넓어야 함

<구분 : 메소드, 생성자 표현 가능 문장>
super.상위변수
super.상위메소드

<생성자호출: 생성자 첫 문장>
super() : 상위 매개변수 없는 생성자 호출 , 자동 정의
super(매개변수) : 상위 매개변수 있는 생성자 호출, 사용자 정의

객체 지향 언어 조건
1. 캡슐화 - 정보 은닉
2. 상속
3. 다형성(polymorphism) 
- 메소드 overloading : 매개변수 전달 - 다르다
- 메소드 overriding : 하위 수정 메소드 존재
==> 같은 이름 : 여러 결과 


final = 수정 불가능
1> final 변수 : 값 수정 불가능 = 상수
2> final 메소드 : 메소드오버라이딩 금지
3> final 클래스 : 상속 금지 -> 메소드 오버라이딩 불가
==> 상속와 오버라이딩 금지 ===> 객체생성과 메소드 호출만 사용 가능 ㄴ
	
다른 클래스를 활용하는 방법
1. 상속
2. 객체 생성
	

abstract : 추상적, 구체X
1> abstract 메소드 : 선언부만 있고 구현부가 없는 메소드 앞에 선언
2> abstract 클래스 : abstract 메소드 최소 1개 이상 존재할 때 선언 
	- 객체 생성 불가능
	- abstract 클래스는 상속 의무화 
	- 하위 클래스에서 오버라이딩 의무화 
	- final 과 같이 사용 불가능 ( final는 상속 불가능, abstract는 상속 의무로 의미 모순)
	
	abstract class 도형{
		abstract void 면적();
		abstract void 둘레();
	} 
	
	class 사각형 extends 도형{
		int 가로;
		int 세로;
		void 면적() {가로*세로};     //abstract 클래스를 상속할 때 오버라이딩
		void 둘레() {2*(가로+세로)}; 
	}
	
	===> abstract 클래스는 전체 프로그램에서 각 클래스별 
	구현해야할 "공통 기능" 명세서 를 의미한다고 할 수 있음 (선언부)
	
	각각 구현하더라도 동일하고 공통된 방식으로 구현이 가능해짐

타입변환, 다형성
자바 변수 처음 선언 타입 변경 
연산자 : (데이터타입이름)
- 기본 타입 변수
	1> boolean 제외
	2> 자동형변환 : 연산자 생략 가능
		규칙 : byte-short(char)-int-long-float-double
	3> 명시적 형변환 : 자동형변환 반대
	
- 참조 타입변수
연산자 : (클래스명)
객체의 타입을 다른 클래스 타입 형변환	
왜?? 서로 다른 객체 1개 배열, 매개변수타입
	서로 다른 객체의 타입 "통일"

	1> 상속관계
	2> 자동 형변환
	상위 클래스명 변수1 = new 하위 클래스 생성자(); 
	--> 하위 클래스 객체 생성하여 상위 클래스 변환
	자동 형변환 이후 접근 가능 변수와 메소드 : 상위 클래스의 변수와 메소드만 사용 가능 
	
	상위 포함 메소드
		1. 하위 overriding 않는 상황 : 상위 메소드 실행
		2. 하위 overriding 상황 : 하위 메소드 실행 
			myarray[i].ma(); ==> 다름 
	

	class A{i, ma(){}}
	class B extends A{j, mb(){}}
	class C extends A{}
	class D extends C{}
	
	A a1 = new A(); // 형변환 필요없음
	A a2 = new B(); // 하위 클래스인 B를 상위 클래스인 A로 자동 형변환 
	A a3 = new C(); // 하위 클래스인 C를 상위 클래스인 A로 자동 형변환 
	A a4 = new D(); // 하위 클래스인 D를 상위 클래스인 A로 자동 형변환 
	
	B b2 = new B();
	b2.i b2.j b2.ma() b2.mb()
	
	A a2 = new B();
	a2.i a2.ma()    // 앞의 선언된 클래스의 요소만 사용 가능     
	
	3> 명시적 형변환
	일단 자동 형변환 되었다가 다시 원래의 하위 클래스 타입으로 변환하는 경우에 사용
	자동 형변환되었으나 원래의 하위 클래스 변수와 메소드 사용이 필요할 때 변환시켜주기 위해 
	
	상위클래스명 변수1 = new 하위생성자();
	하위클래스명 변수2= (하위클래스명)변수1;
	
	
	B b1 = (B)a2;   // 명시적 형변환
	b1.i b1.j b1.ma() b1.mb()
	
	
instanceof : 특정 객체에 해당하는 것인지 확인 가능 , boolean 값 


** import java.lang.Math

















	
	
	
	
	