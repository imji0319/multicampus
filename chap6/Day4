19.01.02
Chap6.클래스 


절차지향언어
- 데이터를 지정하고 이를 순서에 맞게 각 기능을 한번에 하나의 프로그램을 작성함
- 상황이 변할 때마다 프로그램의 수정 필요할 때 전체 소스  코드를 확인해야함

객체지향언어
- 각 기능을 수행하는 주체별로 소스를 분류하여 프로그램 작성 
- 수정이 필요할 때마다 일부 소스만 검토하여 수정 가능 : 유지보수 용이
- 코드 "재사용" -> 프로그램의 간결성 

" Java는 완벽한 '객체지향언어'다. "



객체 = Object = instance  
1> 현실세계 명사 표현 모든 것 
2> 자바 내부 표현 가능 
	2-1> 정적특성파악 = 상태, 속성, 정보 표현
	2-2> 동적특성파악 = 동작, 행위, 기능 표현 
	
	동일 정적 + 동적 특성 무수히 많은 객체들  -> 반복 X : 재사용 => 클래스 
	

클래스 = class
객체 정의 틀/ template / 모델 / 원본 

정적 특성 : 변수 
	데이터 타입 변수명;
동적 특성 : 메소드 = 함수 = 프로시져
	
	
자바 객체지향 프로그램 단계
	1. 객체 정적/동적 특성 파악 (코딩X)
	2. 클래스  변수/메소드  정의
	3. 객체생성 = 클래스의 복사본을 만들어서 메모리 heap영역에 할당
		class 교육생 {....}
		
		교육생 A = new 교육생(); #A라는 객체를 생성
		
클래스 문법 
[modifier] class 클래스이름
 [extends...7장][implements....8장]
 {
	[modifier] 멤버변수 = field변수 : 객체정적특성 표현 데이터  
	[modifier] 메소드 = 함수 = 프로시져 : 객체 동적특성 표현문장모음
	[modifier] 생성자 
}

class A {
	public static void main(String []args){
	}
}

class B {

}

**public 선언된 클래스명과 파일명을 동일하게, 
만약 public이 없다면 main 있는 클래스이름을 파일명으로 지정 

클래스/변수/메소드 
1. 숫자시작x
2. 일반문자 + 숫자 + _,$ 구성
3. 예약어 사용불가
4. 대소문자 구분
5. 길이 무제한
6. 클래스 : 명사, 대문자로 시작
7. 변수 : 명사, 소문자로 시작 
8. 메소드 : 동사. 소문자로 시작 

modifier : 수정자 한정자  제한자
접근방법이나 활용방법 나타내는 역할의 키워드들

- 역할 
1. 접근 권한 
	public : 클래스, 변수, 메소드, 생성자
	protected : 변수, 메소드, 생성자
	private : 변수, 메소드, 생성자
	
2. 활용 방법
	static : 변수, 메소드
	final : 클래스, 변수, 메소드
	abstract :클래스, 메소드
	
3. 기타 
	변수 : volatile, transient
	메소드 : synchronized, native



클래스로부터 객체들 복사 - 생성 -> 실행시작 : Main

- 변수
클래스명 객체주소참조변수명1 = new 클래스명();
객체주소참조변수명1.필드변수 = 

생성자 : constructor
클래스 정의 후에 객체 생성 시점 실행 문장 정의, 호출 

1. 모든 클래스 내부 기본 생성자 자동 정의
	클래스명() {}
	객체생성문장 : 클래스명 변수명 = new 생성자();
2. 생성자 호출: new 연산자 뒤
3. 생성자 호출 실행 : 객체 생성 시점 실행 
4. 사용자 생성자 수동 정의 가능 
	사용자 생성자를 정의하는 이유는 생성시 
	바로 실행해야 하는 문장 및 각 클래스별 변수를 실행 동시에 주고 싶을 때 사용할 수 있도록 도움

5. 사용자 생성자 정의하면 자동 기본 생성자 삭제
6. 1개 클래스내 여러개의 사용자 생성자 정의가능 :오버로딩 Overloading 
	이름이 같고 매개변수 타입, 개수, 순서 다르게 정의 
7. this : 현재 자신 객체를 의미하는 자바 키워드
	7-1> 필드변수와 지역변수 이름 구분
		필드변수와 매개변수 이름이 같은 경우 구분 
		this.id = id;
	7-2> 자신 객체가 포함되어 있는 클래스에서 다른 생성자를 호출할 때(생성자 오버로딩시) : 코드 재사용
		this(...)
		
	문법
	[modifier] 클래스명( [변수 정의] ){
		(객체 생성 시점) 실행 문장 정의;
		
	 }
	 
	 - A 생성자 정의
	 class A{
	  A (int i) {i=100}
	 }
	 

-변수
지역변수(기본타입/참조타입): 메소드/조건문/반복분 내부 선언 사용 가능 

매개변수(기본타입/참조타입): 메소드/ 생성자

필드변수(기본타입/참조타입): 객체정적특성 변수, 클래스 전체 사용가능 변수 


메소드 Method
- 생성자 구조 :메모리 생성 1번만 실행 
	[modifier] 클래스명( [매개변수] ){
		(객체 생성 시점) 
		지역변수 ;
		실행 문장 ;		
	 }
- 메소드 구조 : 생성 이후 여러번 실행
	[modifier] 리턴타입 동사소문자이름( [매개변수] ){
		(객체 생성 시점) 
		지역변수;
		실행 문장 ;
	 }

리턴타입 
	 메소드의 return 값의 타입을 지정
	 리턴타입의 기본,참조타입 사용가능
	 만약 return를 전혀 하지않을 경우 void 라는 타입을 활용
	 
	return은 값을 돌려줄 때와 메소드를 중단할 때 사용 













