19.01.02
Chap6.클래스 


절차지향언어
- 데이터를 지정하고 이를 순서에 맞게 각 기능을 한번에 하나의 프로그램을 작성함
- 상황이 변할 때마다 프로그램의 수정 필요할 때 전체 소스  코드를 확인해야함

객체지향언어
- 각 기능을 수행하는 주체별로 소스를 분류하여 프로그램 작성 
- 수정이 필요할 때마다 일부 소스만 검토하여 수정 가능 : 유지보수 용이
- 코드 "재사용" -> 프로그램의 간결성 

" Java는 완벽한 '객체지향언어'다. "



객체 = Object = instance  
1> 현실세계 명사 표현 모든 것 
2> 자바 내부 표현 가능 
	2-1> 정적특성파악 = 상태, 속성, 정보 표현
	2-2> 동적특성파악 = 동작, 행위, 기능 표현 
	
	동일 정적 + 동적 특성 무수히 많은 객체들  -> 반복 X : 재사용 => 클래스 
	

클래스 = class
객체 정의 틀/ template / 모델 / 원본 

정적 특성 : 변수 
	데이터 타입 변수명;
동적 특성 : 메소드 = 함수 = 프로시져
	
	
자바 객체지향 프로그램 단계
	1. 객체 정적/동적 특성 파악 (코딩X)
	2. 클래스  변수/메소드  정의
	3. 객체생성 = 클래스의 복사본을 만들어서 메모리 heap영역에 할당
		class 교육생 {....}
		
		교육생 A = new 교육생(); #A라는 객체를 생성
		
클래스 문법 
[modifier] class 클래스이름
 [extends...7장][implements....8장]
 {
	[modifier] 멤버변수=field변수 : 객체정적특성 표현 데이터  
	[modifier] 메소드 = 함수 = 프로시져 : 객체 동적특성 표현문장모음
	[modifier] 생성자 
}

class A {
	public static void main(String []args){
	}
}

class B {

}

클래스/변수/메소드 
1. 숫자시작x
2. 일반문자 + 숫자 + _,$ 구성
3. 예약어 사용불가
4. 대소문자 구분
5. 길이 무제한
6. 클래스 : 명사, 대문자로 시작
7. 변수 : 명사, 소문자로 시작 
8. 메소드 : 동사. 소문자로 시작 

modifier : 수정자 한정자  제한자
접근방법이나 활용방법 나타내는 역할의 키워드들

- 역할 
1. 접근 권한 
	public : 클래스, 변수, 메소드, 생성자
	protected : 변수, 메소드, 생성자
	private : 변수, 메소드, 생성자
	
2. 활용 방법
	static : 변수, 메소드
	final : 클래스, 변수, 메소드
	abstract :클래스, 메소드
	
3. 기타 
	변수 : volatile, transient
	메소드 : synchronized, native



















